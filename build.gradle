plugins {
    id 'scala'
    id 'jacoco'
    id 'com.github.johnrengelman.shadow' version '5.1.0'
}

group 'com.bisnode.kafka.opa'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

dependencies {
    implementation group: 'com.fasterxml.jackson.module', name: 'jackson-module-scala_2.12', version: '2.10.0'
    implementation group: 'org.apache.kafka', name: 'kafka_2.12', version: '2.3.1'
    implementation group: 'com.google.guava', name: 'guava', version: '20.0'
    implementation group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.2'

    testImplementation group: 'org.scalatest', name: 'scalatest_2.12', version: '3.0.0'
    testImplementation group: 'junit', name: 'junit', version: '4.12'
    testImplementation group: 'org.apache.logging.log4j', name: 'log4j-slf4j-impl', version: '2.12.1'
}

task testRego(type: Exec) {
    group = 'opa'
    description = 'Runs OPA tests on source directory'
    commandLine 'opa', 'test', 'src/main/rego/', 'src/test/rego/', '-l'
}
task coverageRego(type: Exec) {
    println "coverageRego"
    doFirst {
        mkdir 'build/reports/opa'
    }
    group = 'opa'
    description = 'Generate OPA coverage report'
    standardOutput = new ByteArrayOutputStream()
    commandLine 'opa', 'test', '--coverage', '--format=json', 'src/main/rego/', 'src/test/rego/'
    doLast {
        def file = file(projectDir.absolutePath + '/build/reports/opa/opa-coverage.json')
        if (!file.exists()) {
            file.createNewFile()
        }
        file.text = standardOutput.toString()
    }
}
// Transform OPA coverage format: https://www.openpolicyagent.org/docs/latest/policy-testing/#coverage
// Into a format recognized by Codecov:  https://docs.codecov.io/reference#section-codecov-json-report-format
task opaCoverageToCodecov {
    println "opaCoverageToCodecov"
    def jsonFile = file(projectDir.absolutePath + '/build/reports/opa/opa-coverage.json')
    def opaCoverage = new groovy.json.JsonSlurper().parseText(jsonFile.text) as Map
    def files = (opaCoverage['files'] as Map<String, Object>).keySet()
    def codecov = [coverage: [filename: [:]]]
    files.findAll { !it.endsWith("_test.rego") }.each {
        def currentFile = it
        if (opaCoverage['files'][currentFile]['covered'] instanceof List) {
            (opaCoverage['files'][currentFile]['covered'] as List).each {
                for (int i = (it['start']['row'] as int); i <= (it['end']['row'] as int); i++) {
                    if (codecov['coverage']['filename'][currentFile] == null) {
                        codecov['coverage']['filename'][currentFile] = [:]
                    }
                    codecov['coverage']['filename'][currentFile]["$i"] = 1
                }
            }
        }
        if (opaCoverage['files'][currentFile]['not_covered'] instanceof List) {
            (opaCoverage['files'][currentFile]['not_covered'] as List).each {
                for (int i = (it['start']['row'] as int); i <= (it['end']['row'] as int); i++) {
                    if (codecov['coverage']['filename'][currentFile] == null) {
                        codecov['coverage']['filename'][currentFile] = [:]
                    }
                    codecov['coverage']['filename'][currentFile]["$i"] = 0
                }
            }
        }
    }
    def codecovFile = file(projectDir.absolutePath + '/build/reports/opa/opa-codecov-coverage.json')
    codecovFile.text = new groovy.json.JsonBuilder(codecov).toString()
}
opaCoverageToCodecov.dependsOn coverageRego

if (isOpaInstalled()) {
    check.dependsOn(testRego, opaCoverageToCodecov)
} else {
    System.err.println 'WARNING: Skipping Rego tests since OPA does not seem to be installed'
}

// Consider alternatives to this: https://stackoverflow.com/a/52484259
test.outputs.upToDateWhen {
    false
}

// TODO: Remove as this should not be needed once shadowJar confirmed to work
task copyLibs(type: Copy) {
    from(configurations.default) {
        include 'jackson-module-*'
    }
    into 'build/libs'
}
build.dependsOn copyLibs

shadowJar {
    dependencies {
        exclude(dependency {
            !(it.moduleGroup in [
                    'com.bisnode.kafka.authorization',
                    'com.fasterxml.jackson.module',
                    'com.thoughtworks.paranamer'
            ])
        })
    }
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled false
    }
}

boolean isOpaInstalled() {
    try {
        'opa'.execute()
    } catch (IOException e) {
        println e.message
        return false
    }
    return true
}

test.doFirst {
    if (isOpaInstalled()) {
        println 'Starting OPA server for integration tests'
        ext.process = new ProcessBuilder()
                .directory(projectDir)
                .command('opa', 'run', '-s', 'src/main/rego/policy.rego')
                .start()
    }
}
test.doLast {
    if (tasks.test.process) {
        println('Stopping OPA server')
        tasks.test.process.destroy()
    }
}
